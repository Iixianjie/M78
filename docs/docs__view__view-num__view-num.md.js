(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[227],{"K+nK":function(n,r){function e(n){return n&&n.__esModule?n:{default:n}}n.exports=e},kdw3:function(n,r,e){"use strict";e.r(r);var t=e("0Owb"),a=e("q1tI"),s=e.n(a),o=(e("B2uJ"),e("+su7"),e("qOys")),i=e.n(o),m=e("5Yjd"),l=e.n(m),c=s.a.memo((function(){var n=e("K+nK"),r=n(e("q1tI")),t=n(e("Z+Nd")),a=function(){return r["default"].createElement(t["default"],null)};return r["default"].createElement(a)}));r["default"]=function(){return s.a.createElement(s.a.Fragment,null,s.a.createElement("div",{className:"markdown"},s.a.createElement("h1",{id:"viewnum-\u6570\u5b57"},s.a.createElement("a",{"aria-hidden":"true",href:"#viewnum-\u6570\u5b57"},s.a.createElement("span",{className:"icon icon-link"})),"ViewNum \u6570\u5b57"),s.a.createElement("p",null,"\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u663e\u793a\u6570\u5b57\u7684\u7ec4\u4ef6\uff0c\u652f\u6301\u683c\u5f0f\u5316\u3001\u586b\u5145\u3001\u52a8\u753b\u7b49\u3002"),s.a.createElement("h2",{id:"\u793a\u4f8b"},s.a.createElement("a",{"aria-hidden":"true",href:"#\u793a\u4f8b"},s.a.createElement("span",{className:"icon icon-link"})),"\u793a\u4f8b")),s.a.createElement(l.a,Object(t["a"])({source:{tsx:"import React, { useState } from 'react';\r\nimport { ViewNum } from 'm78/view-num';\r\nimport { Button } from 'm78/button';\r\n\r\nconst Demo = () => {\r\n  const [num, setNum] = useState(999999);\r\n\r\n  return (\r\n    <div style={{ fontSize: 30 }}>\r\n      <div>\r\n        <ViewNum>1000</ViewNum> <span className=\"color-second fs-md\">(\u6570\u5b57)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum pattern=\"3\" precision={1}>\r\n          100000000\r\n        </ViewNum>{' '}\r\n        <span className=\"color-second fs-md\">(\u91d1\u989d)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum pattern=\"3\" transition precision={2}>\r\n          {num}\r\n        </ViewNum>{' '}\r\n        <span className=\"color-second fs-md\">\r\n          (\u52a8\u753b)\r\n          <Button\r\n            className=\"ml-12\"\r\n            onClick={() => setNum(p => p + Math.floor(Math.random() * 100000))}\r\n          >\r\n            +\r\n          </Button>\r\n        </span>\r\n      </div>\r\n      <div>\r\n        <ViewNum pattern=\"3\" precision={2}>\r\n          100000000.0000\r\n        </ViewNum>{' '}\r\n        <span className=\"color-second fs-md\">(\u5c0f\u6570)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum pattern=\"3, 4\" lastRepeat delimiter=\" \">\r\n          17500000000\r\n        </ViewNum>\r\n        <span className=\"color-second fs-md\">(\u624b\u673a\u53f7)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum pattern=\"3, 4\" lastRepeat delimiter=\" \">\r\n          6220224051500000000\r\n        </ViewNum>\r\n        <span className=\"color-second fs-md\">(\u6253\u94b1)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum padLeftZero={8}>520</ViewNum>\r\n        <span className=\"color-second fs-md\">(\u5de6\u586b\u5145)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum\r\n          format={str => {\r\n            const colors = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'purple'];\r\n            return str\r\n              .split('')\r\n              .map((item, index) => {\r\n                const color = colors[index % colors.length];\r\n                return `<span style=\"color: ${color}\">${item}</span>`;\r\n              })\r\n              .join('');\r\n          }}\r\n        >\r\n          1000000\r\n        </ViewNum>\r\n        <span className=\"color-second fs-md\">(\u81ea\u5b9a\u4e49\u6837\u5f0f)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum\r\n          transition\r\n          precision={2}\r\n          format={str => {\r\n            const colors = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'purple'];\r\n            return str\r\n              .split('')\r\n              .map((item, index) => {\r\n                const color = colors[index % colors.length];\r\n                return `<span style=\"color: ${color};padding: 4px;width: 46px;display:inline-block;text-align:center;border-radius: 4px;border:2px solid ${color};margin-right: 12px\">${item}</span>`;\r\n              })\r\n              .join('');\r\n          }}\r\n        >\r\n          {num}\r\n        </ViewNum>\r\n        <span className=\"color-second fs-md\">(\u81ea\u5b9a\u4e49\u6837\u5f0f2)</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Demo;\r\n",jsx:"import React, { useState } from 'react';\r\nimport { ViewNum } from 'm78/view-num';\r\nimport { Button } from 'm78/button';\r\n\r\nconst Demo = () => {\r\n  const [num, setNum] = useState(999999);\r\n  return (\r\n    <div\r\n      style={{\r\n        fontSize: 30,\r\n      }}\r\n    >\r\n      <div>\r\n        <ViewNum>1000</ViewNum> <span className=\"color-second fs-md\">(\u6570\u5b57)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum pattern=\"3\" precision={1}>\r\n          100000000\r\n        </ViewNum>{' '}\r\n        <span className=\"color-second fs-md\">(\u91d1\u989d)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum pattern=\"3\" transition precision={2}>\r\n          {num}\r\n        </ViewNum>{' '}\r\n        <span className=\"color-second fs-md\">\r\n          (\u52a8\u753b)\r\n          <Button\r\n            className=\"ml-12\"\r\n            onClick={() => setNum(p => p + Math.floor(Math.random() * 100000))}\r\n          >\r\n            +\r\n          </Button>\r\n        </span>\r\n      </div>\r\n      <div>\r\n        <ViewNum pattern=\"3\" precision={2}>\r\n          100000000.0000\r\n        </ViewNum>{' '}\r\n        <span className=\"color-second fs-md\">(\u5c0f\u6570)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum pattern=\"3, 4\" lastRepeat delimiter=\" \">\r\n          17500000000\r\n        </ViewNum>\r\n        <span className=\"color-second fs-md\">(\u624b\u673a\u53f7)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum pattern=\"3, 4\" lastRepeat delimiter=\" \">\r\n          6220224051500000000\r\n        </ViewNum>\r\n        <span className=\"color-second fs-md\">(\u6253\u94b1)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum padLeftZero={8}>520</ViewNum>\r\n        <span className=\"color-second fs-md\">(\u5de6\u586b\u5145)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum\r\n          format={str => {\r\n            const colors = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'purple'];\r\n            return str\r\n              .split('')\r\n              .map((item, index) => {\r\n                const color = colors[index % colors.length];\r\n                return `<span style=\"color: ${color}\">${item}</span>`;\r\n              })\r\n              .join('');\r\n          }}\r\n        >\r\n          1000000\r\n        </ViewNum>\r\n        <span className=\"color-second fs-md\">(\u81ea\u5b9a\u4e49\u6837\u5f0f)</span>\r\n      </div>\r\n      <div>\r\n        <ViewNum\r\n          transition\r\n          precision={2}\r\n          format={str => {\r\n            const colors = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'purple'];\r\n            return str\r\n              .split('')\r\n              .map((item, index) => {\r\n                const color = colors[index % colors.length];\r\n                return `<span style=\"color: ${color};padding: 4px;width: 46px;display:inline-block;text-align:center;border-radius: 4px;border:2px solid ${color};margin-right: 12px\">${item}</span>`;\r\n              })\r\n              .join('');\r\n          }}\r\n        >\r\n          {num}\r\n        </ViewNum>\r\n        <span className=\"color-second fs-md\">(\u81ea\u5b9a\u4e49\u6837\u5f0f2)</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Demo;\r\n"}},{path:"/_demos/demo-30",dependencies:{},files:{}}),s.a.createElement(c,null)),s.a.createElement("div",{className:"markdown"},s.a.createElement("h2",{id:"api"},s.a.createElement("a",{"aria-hidden":"true",href:"#api"},s.a.createElement("span",{className:"icon icon-link"})),"API"),s.a.createElement("p",null,s.a.createElement("strong",null,s.a.createElement("code",null,"props"))),s.a.createElement(i.a,{code:"interface NumProps extends ComponentBaseProps {\n  /** \u6570\u5b57\u52a8\u753b */\n  transition?: boolean;\n  /** 2 | \u4fdd\u7559\u6307\u5b9a\u7684\u5c0f\u6570\u4f4d */\n  precision?: number;\n  /** \u683c\u5f0f\u4e3a `1,2,3,4` \u89c4\u5219\u7684\u6a21\u5f0f\u5b57\u7b26\uff0c\u6570\u5b57\u4e24\u7aef\u53ef\u5305\u542b\u7a7a\u683c */\n  pattern?: string;\n  /** ', ' | \u5206\u5272\u7b26 */\n  delimiter?: string;\n  /** \u5f53\u5b57\u7b26\u957f\u5ea6\u8d85\u8fc7pattern\u53ef\u5339\u914d\u5230\u7684\u957f\u5ea6\u65f6\uff0c\u91cd\u590d\u4ee5\u5f53\u524dpattern\u5bf9\u5269\u4f59\u5b57\u7b26\u8fdb\u884c\u683c\u5f0f\u5316 */\n  repeat?: boolean;\n  /** \u5f53\u5b57\u7b26\u957f\u5ea6\u8d85\u8fc7pattern\u53ef\u5339\u914d\u5230\u7684\u957f\u5ea6\u65f6\uff0c\u91cd\u590d\u4ee5\u5f53\u524dpattern\u7684\u6700\u540e\u4e00\u4f4d\u5bf9\u5269\u4f59\u5b57\u7b26\u8fdb\u884c\u683c\u5f0f\u5316 */\n  lastRepeat?: boolean;\n  /** \u6570\u5b57\u6216\u5b57\u7b26\u6570\u5b57 */\n  children?: number | string;\n  /** \u5f53\u957f\u5ea6\u4e0d\u8db3\u65f6\uff0c\u5148\u5de6\u4fa7\u586b\u51450\u5230\u6307\u5b9a\u957f\u5ea6 */\n  padLeftZero?: number;\n  /** \u5373\u5c06\u7528\u4e8e\u6e32\u67d3\u7684\u6700\u7ec8\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u901a\u8fc7\u6b64\u51fd\u6570\u6267\u884c\u6e32\u67d3\u524d\u7684\u81ea\u5b9a\u4e49\u8f6c\u6362 */\n  format?: (numStr: string) => string;\n}\n",lang:"tsx"})))}}}]);